version: '3.8'

services:
  # Main CronPilot application
  cronpilot:
    build: .
    container_name: cronpilot-app
    ports:
      - "7000:7000"
    environment:
      - PYTHONPATH=/app
      - TZ=UTC
    volumes:
      # Mount tasks directory for easy task management
      - ./tasks:/app/tasks
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      # Mount config for easy configuration changes
      - ./config.yaml:/app/config.yaml:ro
      # Mount database for persistence
      - cronpilot_data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - cronpilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (optional - can use SQLite instead)
  postgres:
    image: postgres:15-alpine
    container_name: cronpilot-postgres
    environment:
      POSTGRES_DB: cronpilot
      POSTGRES_USER: cronpilot
      POSTGRES_PASSWORD: cronpilot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - cronpilot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cronpilot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: cronpilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - cronpilot-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: cronpilot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cronpilot
    restart: unless-stopped
    networks:
      - cronpilot-network
    profiles:
      - production

  # Monitoring with Prometheus and Grafana (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cronpilot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cronpilot-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: cronpilot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - cronpilot-network
    profiles:
      - monitoring

volumes:
  cronpilot_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cronpilot-network:
    driver: bridge
